--------------------JAVASCRIPT---------------------

1. Callback

- Hiểu đơn giản là 1 hàm
- Được truyền qua đối số
- Được gọi lại (trong hàm nhận đối số)

-> Hiểu đơn giản qua 3 điều kiện trên là ta truyền 1 hàm A vào 1 hàm B khác thông qua truyền đối số,
đến lúc nào đó hàm B sẽ được gọi lại để thực thi, thường dùng để lắng nghe các event, xử lý các bất đồng bộ
VD: Chúng ta đều biết các hàm hay gặp forEach, filter, find, some, map, reduce thường dùng xử lý các data, đây
cũng là hàm callback vì thường truyền cho nó đối số để xử lý các hàm khác trong nó

    Array.prototype.map2 = function (callback) {
        var output = [];
        var courseLength = this.length;

        for (var i = 0; i < courseLength; ++i) {
            var result = callback(this[i], i);
            output.push(result);
        }

        return output;
    };

    var courses = ["Javascript", "Node JS", "Java"];

    var htmls = courses.map2(function (course) {
        return `<h2>${course}</h2>`;
    });

    console.log(htmls.join("\n"));

2. HTML DOM

- DOM (Document Object Model) - Là 1 mô hình đối tượng tài liệu và giao diện lập trình chuẩn cho HTML
- Khi trình duyệt được tải, trình duyệt sẽ tạo DOM, chúng ta nhìn vào file HTML sẽ là text còn trình duyệt sẽ là cây DOM
- Mô hình DOM được phát triển dạng cây
- DOM có 3 thành phần: Element, Attribute, Text.

* 2.1 Phân biệt HTML DOM và DOM API

- Cần chú ý HTML DOM khác với Javascript, DOM là quy chuẩn do W3C tạo ra, JS chỉ cung cấp phương tiện để truy xuất vào HTML DOM mà thôi.
- Javascript: Hoạt động cả 2 Browser (FrontEnd) || Server (Backend) -> nơi xử lý và lưu trữ website
- DOM: HTML -> DOM -> WEB API (Application Programming Interface)

* 2.2 Document Object
  -> Document chính là thành phần đứng đầu (nút gốc) điểm xây dựng cây DOM và chứa tất cả: (Element, Attribute, Text) chính là 3 thành phần cấu tạo nên DOM và phải đi qua Document mới truy cập 3 thành phần trên

* 2.3 Get Element Method (Học về thành phần lớn đầu tiên của DOM: Element)

- Cách getElement: ID, class, tag, CSS Selector, HTML collection
- Với thẻ có attribute id bên trong chúng ta có dùng: document.getElementById("name ID"); để get thuộc tính thẻ chứa tên ID đó (1 web chỉ có 1 id có name riêng biệt)
- Với thẻ có attribute className bên trong chúng ta dùng: document.getElementsByClassName("name class"); ta thu về dc 1 HTML Collection (có thể dung for để lặp qua)
- Với tagName như (h1, h2, p, a....) chúng ta dùng: document.getElementByTagName("tag name"); ta cx thu về đc 1 HTML collection
- Với CSS Selector chúng ta dùng document.querySelector('name id, className.... đang cầm truy xuất đến')
- Tuy nhiên querySelector chỉ trả về 1 phần tử, muốn lấy nhiều phần tử nodeList chúng ta dùng: document.querySelectorAll('name id, className'); dùng mảng [0] để truy xuất đến phần tử cần dùng trong nodeList
- Với ví dụ sử dụng HTML Collection, thẻ <form> hay thẻ <a> chúng ta có thể truy xuất trực tiếp: document.forms.tên id form, document.anchors
- Lưu ý đặc biệt cần phải lưu ý rõ: chỉ có: document.getElementById() và document.querySelector() trả về phần tử Element đang được truy xuất.

* 2.4 Attribute node & Text node

- Là thuộc tính nằm trong thẻ tag thì gọi là node Attribute
- Text node là đoạn text nằm <>giữa</> thẻ tag

* 2.5 DOM Attribute

- Khi chúng ta cần xét thuộc tính hay gọi là thiết lập 1 attribute mới (tuy nhiên không hợp lệ với thẻ tag: ví dụ thẻ h1 muốn thêm href chẳng hạn)
  , khi đó chúng ta cần tạo hàm và truyền đối số cho hàm: tên thuộc tính query tới.setAttribute("tên thuộc tính: id, data-1...", "Giá trị: heading,...")
- Còn nếu thuộc tính đó hợp lệ chúng ta đơn giản chỉ cần dùng tên thuộc tính query tới.tên thuộc tính = "Giá trị: heading...."
- TH1 (Với trường hợp không hợp lệ) Để get được thuộc tính để thêm vào chúng ta có thể dùng: tên thuộc tính query tới.getAttribute("tên thuộc tính: data-1, ....").
- TH2 (Với trường hợp, hợp lệ): Chúng ta đơn giản chỉ cần truy xuất trực tiếp tên thuộc tính đó để gọi qua dấu "."

* 2.6 InnerText & Text content Property.

- Cả 2 đều thuộc phạm trù của text node, điểm giống nhau của chúng là đều dùng để get content bên trong thẻ được query tơí và cũng dùng nó để có thể thay đổi nội dung (chính là getter và setter)
- Đương nhiên chúng có điểm khác biệt, sử dụng "textContent" có thể lấy được tất cả các nội dung bao gồm cả phần tử được ẩn đi,
  Ngược lại với nó, innerText sẽ chỉ lấy được nội dung của các phần tử là "human-readable" tức là những phần tử hay nội dung mà coder chỉ cho phép bạn đọc được,
  bằng cách sử dụng các thuộc tính như (CSS display: none, CSS visibility: hidden, hidden attribute của HTML)

* 2.7 InnerHTML & OuterHTML Property.

- innerHTML dùng để thêm element, attribute, text node vào element node, thêm vào DOM, gọi là setter, lúc getter chỉ cần truy xuất ".innerHTML" là đc
- outerHTML khác với innerHTML là nó ghi đè luôn element đang được query tới, không thể sủ dụng getter để lấy sử dụng element cũ nữa

* 2.8 Node Properties

- Như bài học HTML DOM thì chúng ta đã biết nó được cấu tạo từ các Node với mỗi Node có thể thuộc 1 trong 3 thứ là Element, Attribute và Text. Khi ta truy cập vào 1 node chúng ta có thể lấy ra những thứ của nó như truy cập vào element thì có thể nhận được innerHTML, innerText. Hoặc truy cập vào Attribute chúng ta có thể lấy ra những thứ của nó.

Những thứ đó có thể là chung hoặc riêng: ![Alt text](image-2.png)

Chúng ta có thể kiểm tra các method riêng của chúng bằng cách sử dụng cú pháp sau để xem:

var tempt = document.querySelector('.box')
console.log([tempt]) // Xem có thể lấy gì

Kết quả: ![Alt text](image-3.png)

- Những thuộc tính attributes node đáng chú ý:
  +> class
  +> autofocus: true (tự động kích trỏ chuột để xác định highlight đầu paragraph)
  +> baseURI: "http://...",
  +> childElementCount
  +> childNodes: return NodeList
  +> children: return HTML Collection
  +> classList: return DOMTokenList (quản lý attribute class: thêm, bớt, chỉnh sử, kiểm tra....)
  +> contentEditable: user có thể chỉnh sửa
  +> draggable: true (xác định web bạn có kéo dc hay ko)
  +>

* 2.9 DOM CSS

- Hay chính là DOM style, điểm khác là thuộc tính khi ở CSS và JS khác nhau là bên JS viết theo camelCase (từ đầu viết thường,
  chữ cái đầu từ thứ 2 viết hoa)
- Để set giá trị (setter) chúng ta dùng tên element(được truy xuất tới).style.(thuộc tính muốn sử dụng css: width) = '200px';
- Để tránh phức tạp, có thể set nhiều thuộc tính cho element chúng ta sẽ dùng tới object assign: Ví dụ
  Object.assign("tên element.style", {
  width: "200px",
  height: "100px",
  backgroundColor: "pink",
  })

* 2.10 ClassList Property

- classList trong JavaScript là thuộc tính read-only trả về một DOMTokenList chứa danh sách class của các phần tử. Sử dụng classList giúp chúng ta dễ dàng thao tác với danh sách class của phần tử
- 4 phương thức thường dùng nhất khi làm việc với thuộc tính classList: add(thêm class), contains(check class có tồn tại trong element), remove(xoá bỏ class dc gọi), toggle(thêm hoặc gỡ bỏ nêu chưa có hoặc tồn tại class trong element)

* 2.11 DOM Events

- Là sự kiện diễn ra khi trình duyệt load trang web hay user sử dụng sẽ tương tác với website: thực hiện các hành vi, lắng nghe sự kiện
  diễn ra (.) DOM
- Tuỳ trường hợp có 2 cách thực hiện lắng nghe sự kiện: Attribute events & Assign event using the element node.
- Attribute events chính là cách định nghĩa thẳng events vào trong attribute của thẻ tag trong file HTML, lưu ý chúng ta thêm tiền tố "on"
  vào đằng trước tên sự kiện ví dụ như onclick: <h1 onclick="">DOM events</h1>
- Assign event using the element node: cũng đêù thêm tiền tố on đằng trước, trước khi "." tới phương thức event được gán bằng 1 function,
  có thể tham khảo thêm Mouse Events khi lắng nghe 1 function

- Một số sự kiện thường hay dùng:
  +> click (lắng nghe hành động click chuột vào web của user)
  +> change (khi thay đổi ví dụ thay đổi nội dung thẻ input)
  +> copy (thực hiện hành động copy trên website)
  +> cut (thực hiện hành động cut trên website)
  +> focus (khi sự kiện xảy ra focus vào element nào đó)
  +> keydown, keyup (lắng nghe hành vi bấm xuống, nhấc tay của user trên keyboard)
  +> mouseover, mouseout (hành vi di con chuột vào ra trên element đó, tương tự như hover CSS)
  +> resize (lắng nghe hành vi thay đổi kích thước của element)
  +> scroll (lắng nghe hành động lăn con chuột)

* 2.12 Prevent Default & Stop Propagation

- Phương thức preventDefault sử dụng để loại bỏ hành vi mặc định của trình duyệt
- Phương thức stopPropagation sử dụng để loại bỏ sự kiện nổi bọt (bubbling and catching)

* 2.13 Event Listener

- Phương pháp khác để lắng nghe sự kiện trong DOM xảy ra
- Để so sánh 2 phương thức DOM events và Event Listener, ta so sánh 2 khía cạnh của nó
  -> Nếu với DOM events, khi xử lý nhiều việc khi 1 event xảy ra, thông qua việc gán cho nó 1 function, và trong function đó ta thực hiện
  xử lý các việc thông thường là các function khác, dễ dẫn callback hell, ngoài ra khi huỷ bỏ lắng nghe sự kiện này để lắng nghe sự kiện
  khác, bắt buộc phải gán đè nó với function khác
  -> Với Event Listener, với trường hợp khi xử lý nhiều việc khi 1 event xảy ra, rất phù hợp và thuận tiện, có thể thực hiện đồng thời
  thay vì chúng ta phải wait từng việc được xử lý, ví dụ:

  element.addEventListener('tên event: click, focus...', function(e) {

  })

  và đương nhiên để huỷ bỏ sự kiện cũng đơn giản hơn nhiều, chúng ta có thể dùng remove thay cho add như ở ví dụ trên:
  element.removeEventListener('tên event: click, focus...', tên function huỷ bỏ)

- Tuy nhiên, chúng ta vẫn dùng DOM events trong cac trường hợp đơn giản và không có nhu cầu gỡ sự kiện đó đi, còn trong trường hợp chúng
  ta có nhiều việc cần phải xử lý trong event đó, thực tế dùng DOM events vẫn được tuy nhiên nhìn gọn gàng và dễ dàng bóc tách khi sử dụng với Event Listener, còn trong trường hợp khi 1 sự kiện diễn ra nhưng lại muốn huỷ bỏ lắng nghe sau đó, thì chúng ta Event Listener để huỷ bỏ ngay cả khi có nhiều event listener.

3. JSON, Fetch, Postman

3.1 JSON

- JSON là 1 định dạng dữ liệu (chuỗi) - JavaScript Object Notation
- JSON là một định dạng dữ liệu dựa trên văn bản, được biểu diễn bằng cặp key-value (khóa-giá trị).
- Bất cứ ngôn ngữ nào lập trình nào cũng đều sử dụng JSON, vì là tiêu chuẩn giúp định dang dữ liệu đơn giản
- JSON: Number, String, Boolean, Null, Array, Object <-> JSON và ngược lại có thể biến trở lại định dạng của nhau
- Ta dùng cú pháp (stringify / parse) để biến trở thành JSON / parse nó về định dạng ban đầu
- JSON có định dạng là chuỗi, chứa trong dấu '', ví dụ var json = '{"name": "Tung", "age": 28}'
- Dữ liệu trong JSON phải nằm trong cặp dấu ngoặc nhọn `{}`.
- Mỗi cặp key-value được phân tách bằng dấu phẩy `,`
- Key phải là một chuỗi (string), và giá trị có thể là một số, chuỗi, đối tượng, mảng, boolean, hoặc null.
- Chuỗi phải được bao quanh bởi dấu nháy kép.
- `JSON.stringify()`: Chuyển đối tượng JavaScript thành chuỗi JSON.
- `JSON.parse()`: Chuyển chuỗi JSON thành đối tượng JavaScript.

  3.2 Promise (sync, async)

  3.2.1 Promise

- Sync hay synchronous (đồng bộ) theo tư duy sẽ là chương trình nào viết trước, chạy trước, viết sau, chạy sau.
- Async hay asynchronous (bất đồng bộ) theo lý thuyết là chương trình có thể bỏ qua bước nào đó đang ở trạng thái đình trệ tạm thời (pending state) để xử lý nhiều công việc đồng thời khác, tuy nhiên sẽ gây quản lý khó khăn nếu xuất hiện debug.
- Những hàm thường hay gây ra bất đồng bộ (async): setTimeout, setInterval, fetch, XMLHttpRequest, file reading, request animation frame
- Javascript sẽ nhờ khả năng của callback để giải quyết tất cả vấn đề bất đồng bộ

  3.2.2 Promise (pain)

- Pain (nỗi đau): Callback hell hay pyramid doom chính là nỗi đau, vấn đề khi sử dụng callback
- Question: "Vậy thì Promise sẽ có ứng dụng chung là xử lí các quá trình bất đồng bộ khi có khoảng thời gian Delay?"

-> Đầu tiên để xử lý các tác dụ bất đồng bộ trong JS chúng ta xử dụng "callback", tuy nhiên có thể trình bày không tốt vì dễ "callback hell". Từ đó Promise ra đời, cung cấp cách viết theo chuỗi (chain) giúp có thể trình bày tốt hơn là "callback".

Suy ra, việc sử dụng "callback" hay "promise" cũng là để xử lý các tác vụ bất đồng bộ (thường là các tác vụ đọc file, gửi yêu cầu mạng, v.v).

- Question: "Và nếu như có quá nhiều thời gian delay mà kết quả delay của quá trình 1 là yêu cầu xử lí của quá trình 2 thì chúng ta sẽ sử dụng Promise?"

Như đã trả lời ở ý trên, "callback" hay "Promise" để xử lý các tác vụ bất đồng bộ, bất kể nó là tác vụ độc lập (đơn lẻ) hoặc phụ thuộc vào kết quả của một tác vụ khác.

- Nếu là các tác vụ độc lập: Sử dụng các "callback" hoặc "promise" được viết riêng ra, để không phải chờ đợi nhau.
  // Tác vụ 1
  const task1 = new Promise(...)
  task1.then((result1) => {
  console.log(result1) // kết quả task 1
  })

// Tác vụ 2
const task2 = new Promise(...)
task2.then((result2) => {
console.log(result2) // kết quả task 2
})

- Nếu là các tác vụ phụ thuộc nhau: Ví dụ như task 2 cần kết quả của task 1.

// Tác vụ 1
const task1 = new Promise(...)
task1.then((result1) => {
// Tác vụ 2 (Lấy kết quả từ "result1" để xử lý tiếp)
const task2 = new Promise(...)
task2.then((result2) => {
console.log(result2) // kết quả task 2
})
})

-> Nhưng viết vậy lại có thể thành "Promise hell" (tưởng tượng có 5 tasks phụ thuộc nhau?), nên viết kiểu này "ok la" hơn:
// Tác vụ 1
const task1 = new Promise(...)
task1
.then((result1) => {
// Tác vụ 2 (Lấy kết quả từ "result1" để xử lý tiếp)
const task2 = new Promise(...)
return task2
})
.then((result2) => {
console.log(result2) // nhận kết quả task 2
})

-> Trong thực tế, em cần gửi một yêu cầu mạng để nhận lại được data cho biến này (task bất đồng bộ), nên thực tế không làm vậy được đâu em ạ. Em sẽ lại phải viết như 2 ví dụ promise anh viết ở trên thôi. Trong JS ES6 có cú pháp async và await giúp đơn giản hóa cách viết Promise, giúp code đọc "giống như code đồng bộ":

async function getData() {
const result1 = await new Promise(...) // task 1
const result2 = await new Promise(...) // task 2 (lấy result1 để xử lý tiếp)
console.log(result2) // kết quả task 2
}
getData()

Chúng ta viết await trước các task vụ bất đồng bộ (những chỗ mà thường .then() khi dùng Promise ý), và để dùng được await ta cần sử dụng bên trong async function.

3.2.2 Promise (concept)

-> Promise là một cơ chế trong JavaScript giúp bạn thực thi các tác vụ bất đồng bộ mà không rơi vào callback hell hay pyramid of doom, là tình trạng các hàm callback lồng vào nhau ở quá nhiều tầng

- Cú pháp var promise = new Promise(
    <!-- Executer -->

  function(resolve, reject) {
    <!--
                            Logic
                            Thành công: resolve()
                            Thất bại: reject
                        -->

  });

  - Phải nhớ khi gọi function trong object constructor của Promise với từ khoá new, phải nhớ gọi 1 trong 2 reject() hoặc resolve() trong executer nếu không nó sẽ mãi ở trạng thái pending gây memory leak.

  -> promise.then(function() {
  <!-- Được call khi resolve được call -->

  })
  .catch(function() {
  <!-- Được call khi reject được call -->

  })
  .finally(function() {
  <!-- Được call khi 1 trong 2 reject hoặc resolve được call -->

  })

* Promise có 3 trạng thái chính:
  +> Pending (trạng thái khởi tạo: chờ 1 trong 2 resolve hoặc reject được thực thi)
  +> Fulfilled (trạng thái chạy thành công resolve)
  +> Rejected (trạng thái chạy thất bại reject)

  3.2.2 Promise (chain)

  -> Tính chất chuỗi của Promise là khả năng liên kết nhiều xử lý bất đồng bộ liên tiếp theo nhau một cách dễ đọc và dễ quản lý. Điều này được thực hiện bằng cách sử dụng phương thức then để kết nối các hàm xử lý (handlers).

  -> Chú ý với tính chất chuỗi của Promise, khi phương thức then được gọi, nếu nó return không phải là new promise thì nó sẽ trả về chính value mà return trong callback then, còn nếu là 1 new promise, nó sẽ trả về chính promise được return trong callback.

  -> Khi một Promise chuyển từ trạng thái "Pending" sang trạng thái "Resolve" phương thức then được gọi, và nó trả về một Promise mới. Điều này cho phép bạn liên kết một hàm xử lý tiếp theo để thực hiện công việc tiếp theo sau khi Promise trước đã giải quyết:

  function asyncTask1() {
  return new Promise((resolve) => {
  setTimeout(() => {
  console.log("Task 1 completed");
  resolve("Result from Task 1");
  }, 1000);
  });
  }

function asyncTask2(result) {
return new Promise((resolve) => {
setTimeout(() => {
console.log("Task 2 completed with result:", result);
resolve("Result from Task 2");
}, 1000);
});
}

asyncTask1()
.then((result1) => asyncTask2(result1))
.then((result2) => {
console.log("Final result:", result2);
})
.catch((error) => {
console.error("An error occurred:", error);
});

-> Trong ví dụ này, asyncTask1 và asyncTask2 là hai hàm trả về Promise. Bằng cách sử dụng phương thức then, kết quả từ asyncTask1 được chuyển đến asyncTask2, và sau đó, kết quả từ asyncTask2 được chuyển đến một hàm xử lý cuối cùng. Nó giúp tạo ra một chuỗi các xử lý bất đồng bộ một cách tuần tự và dễ đọc.

  3.2.2 Promise methods(resolve, reject, all)

- Một lưu ý về tính chất chuỗi đó là mặc dù chúng ta có thể ".then" nhiều lần tuy nhiên có thể reject bất cứ lúc nào, trong một hàm then bất kỳ, nếu gặp lỗi return 1 promise bị reject, nó sẽ dừng lại ko chạy các hàm then kế tiếp, lọt thẳng vào hàm ".catch" thay vì ".then"
- Phương thức mới liên quan: Promise.resolve(), Promise.reject(), Promise.all()
  -> Thay vì sử dụng var biến = new Promise() rồi mới resolve() chúng ta có thể var biến = Promise.resolve()

* Promise.all()

- Trả về 1 promise mới
- promise chỉ được kết thúc khi các promise trong iterable kết thúc hoặc có 1 promise nào
  đó xử lý thất bại
- kết quả trả ra là 1 MẢNG chứa kết quả của tất cả các promise theo đúng thứ tự promise được
  truyền vào
- giúp chạy song song các Promise không phụ thuộc nhau, nhưng muốn data chúng liên kết với nhau, ví dụ như dùng kết quả của chúng
  VD: Promise.all([promise1, promise2]) => lưu ý đối số nhận vào là 1 array

* Async, await

- Là 1 cơ chế giúp bạn thực hiện các thao tác bất đồng bộ một cách tuần tự hơn, async/await vẫn sẽ dùng cơ chế promise nhưng mã nguồn dễ đọc hơn
- Để sử dụng thì ta khai báo hàm với từ khoá async, khi đó bên trong ta mới có thể dùng await
- Kết quả trả về của 1 async function luôn là 1 promise

  3.3 Fetch

  - API (Application Programming Interface) hiểu đơn giản là các URL, cổng giao tiếp giữa Back-end và Front-end
  - BE -> API -> Fetch -> JSON/XML -> JSON.parse -> JavaScript type -> render HTML ra giao diện
  - Fetch là một API trong JavaScript được sử dụng để tương tác với các nguồn tài nguyên mạng (như các API web) và làm việc với dữ liệu thông qua HTTP.
* Cách sử dụng Fetch: Phương thức fetch() trả về một Promise, nó hỗ trợ hai tham số chính: URL của nguồn tài nguyên và một đối tượng cấu hình (optional).
    VD: fetch('https://api.example.com/data')
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));

* Xử lý Phản hồi (Response): Phương thức fetch() trả về một đối tượng Response. Bạn cần sử dụng các phương thức như json(), text(), hoặc blob() để trích xuất dữ liệu từ phản hồi.
    VD: fetch('https://api.example.com/data')
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));

* Cấu hình yêu cầu (Request configuration): Bạn có thể cấu hình yêu cầu bằng cách sử dụng các tùy chọn như method, headers, body, mode, cache, và nhiều tùy chọn khác.
    VD: fetch('https://api.example.com/data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // other headers
            },
            body: JSON.stringify({ key: 'value' })
        })

* Xử lý lỗi: Sử dụng `.catch()` để xử lý lỗi nếu có.
    VD: fetch('https://api.example.com/data')
            .then(response => {
                if (!response.ok) {
                 throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));

* Async/Await với Fetch: Sử dụng `async` và `await` để làm cho mã của bạn trở nên dễ đọc hơn khi sử dụng Fetch. 
    VD: async function fetchData() {
            try {
                const response = await fetch('https://api.example.com/data');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                console.log(data);
            } catch (error) {
                console.error('Error:', error);
            }
        }

* Cross-Origin Resource Sharing (CORS): Fetch tuân theo chính sách CORS. Nếu bạn gặp vấn đề với CORS, bạn có thể cần xử lý nó ở 
phía máy chủ hoặc thêm các tùy chọn cấu hình đúng trong yêu cầu Fetch.

  3.4 JSON Server & Postman (công cụ làm việc REST API)
  - REST là viết tắt của Representational State Transfer, là một kiến trúc thiết kế phần mềm được sử dụng để xây dựng các dịch vụ web. 
  - REST API (Application Programming Interface) là một tập hợp các quy tắc và nguyên tắc để thiết kế và phát triển các dịch vụ web.
  - JSON Server là một công cụ giả lập máy chủ (server) RESTful API từ một tập tin JSON.
  - Giúp phát triển ứng dụng mà không cần tạo một máy chủ thực sự (fake api server backend) và cơ sở dữ liệu phức tạp. Thường được sử dụng trong quá trình phát triển và kiểm thử ứng dụng.
  - API server (Fake/Mock API)
  - Để thao tác với data (API) gọi là CRUD (Create, Read, Update, Delete: tạo mới, lấy , sửa, xoá dữ liệu)
  - Công cụ Postman giúp thuận tiện test api (đảm bảo api hoạt động tốt trước khi code)
  - CRUD chính là đại diện cho giao thức HTTP protocol, bao gồm các phương thức phổ biến 
    +> Create: Tạo mới -> POST
    +> Read: Lấy dữ liệu -> GET
    +> Update: Chỉnh sửa dữ liệu -> PUT/PATCH
    +> Delete: xoá -> DELETE





